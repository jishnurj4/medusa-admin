{"version":3,"file":"code-block.js","sourceRoot":"","sources":["../../../../src/components/code-block/code-block.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\"\nimport { Highlight, Prism, themes } from \"prism-react-renderer\"\nimport * as React from \"react\"\n;(typeof global !== \"undefined\" ? global : window).Prism = Prism\n\n// @ts-ignore\nimport(\"prismjs/components/prism-json\")\n\nimport { Copy } from \"@/components/copy\"\nimport { clx } from \"@/utils/clx\"\n\nexport type CodeSnippet = {\n  /**\n   * The label of the code snippet's tab.\n   */\n  label: string\n  /**\n   * The language of the code snippet. For example, `tsx`.\n   */\n  language: string\n  /**\n   * The code snippet.\n   */\n  code: string\n  /**\n   * Whether to hide the line numbers shown as the side of the code snippet.\n   */\n  hideLineNumbers?: boolean\n  /**\n   * Whether to hide the copy button.\n   */\n  hideCopy?: boolean\n}\n\ntype CodeBlockState = {\n  snippets: CodeSnippet[]\n  active: CodeSnippet\n  setActive: (active: CodeSnippet) => void\n} | null\n\nconst CodeBlockContext = React.createContext<CodeBlockState>(null)\n\nconst useCodeBlockContext = () => {\n  const context = React.useContext(CodeBlockContext)\n\n  if (context === null)\n    throw new Error(\n      \"useCodeBlockContext can only be used within a CodeBlockContext\"\n    )\n\n  return context\n}\n\ntype RootProps = {\n  snippets: CodeSnippet[]\n}\n\n/**\n * This component is based on the `div` element and supports all of its props\n */\nconst Root = ({\n  /**\n   * The code snippets.\n   */\n  snippets,\n  className,\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & RootProps) => {\n  const [active, setActive] = React.useState(snippets[0])\n\n  return (\n    <CodeBlockContext.Provider value={{ snippets, active, setActive }}>\n      <div\n        className={clx(\n          \"border-ui-code-border flex flex-col overflow-hidden rounded-lg border\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </CodeBlockContext.Provider>\n  )\n}\nRoot.displayName = \"CodeBlock\"\n\ntype HeaderProps = {\n  hideLabels?: boolean\n}\n\n/**\n * This component is based on the `div` element and supports all of its props\n */\nconst HeaderComponent = ({\n  children,\n  className,\n  /**\n   * Whether to hide the code snippets' labels.\n   */\n  hideLabels = false,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & HeaderProps) => {\n  const { snippets, active, setActive } = useCodeBlockContext()\n  return (\n    <div\n      className={clx(\n        \"border-b-ui-code-border bg-ui-code-bg-subtle flex items-center gap-2 border-b px-4 py-3\",\n        className\n      )}\n      {...props}\n    >\n      {!hideLabels &&\n        snippets.map((snippet) => (\n          <div\n            className={clx(\n              \"text-ui-code-fg-subtle txt-compact-small-plus transition-fg cursor-pointer rounded-full border border-transparent px-3 py-2\",\n              {\n                \"text-ui-code-fg-base border-ui-code-border bg-ui-code-bg-base cursor-default\":\n                  active.label === snippet.label,\n              }\n            )}\n            key={snippet.label}\n            onClick={() => setActive(snippet)}\n          >\n            {snippet.label}\n          </div>\n        ))}\n      {children}\n    </div>\n  )\n}\nHeaderComponent.displayName = \"CodeBlock.Header\"\n\n/**\n * This component is based on the `div` element and supports all of its props\n */\nconst Meta = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={clx(\n        \"txt-compact-small text-ui-code-fg-subtle ml-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMeta.displayName = \"CodeBlock.Header.Meta\"\n\nconst Header = Object.assign(HeaderComponent, { Meta })\n\n/**\n * This component is based on the `div` element and supports all of its props\n */\nconst Body = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { active } = useCodeBlockContext()\n  return (\n    <div\n      className={clx(\n        \"bg-ui-code-bg-base relative h-full overflow-y-auto p-4\",\n        className\n      )}\n      {...props}\n    >\n      {!active.hideCopy && (\n        <Copy\n          content={active.code}\n          className=\"text-ui-code-fg-muted absolute right-4 top-4\"\n        />\n      )}\n      <div className=\"max-w-[90%]\">\n        <Highlight\n          theme={{\n            ...themes.palenight,\n            plain: {\n              color: \"rgba(249, 250, 251, 1)\",\n              backgroundColor: \"rgb(17,24,39)\",\n            },\n            styles: [\n              ...themes.palenight.styles,\n              {\n                types: [\"keyword\"],\n                style: {\n                  fontStyle: \"normal\",\n                  color: \"rgb(187,160,255)\",\n                },\n              },\n              {\n                types: [\"punctuation\", \"operator\"],\n                style: {\n                  fontStyle: \"normal\",\n                  color: \"rgb(255,255,255)\",\n                },\n              },\n              {\n                types: [\"constant\", \"boolean\"],\n                style: {\n                  fontStyle: \"normal\",\n                  color: \"rgb(187,77,96)\",\n                },\n              },\n              {\n                types: [\"function\"],\n                style: {\n                  fontStyle: \"normal\",\n                  color: \"rgb(27,198,242)\",\n                },\n              },\n              {\n                types: [\"number\"],\n                style: {\n                  color: \"rgb(247,208,25)\",\n                },\n              },\n              {\n                types: [\"property\"],\n                style: {\n                  color: \"rgb(247,208,25)\",\n                },\n              },\n              {\n                types: [\"maybe-class-name\"],\n                style: {\n                  color: \"rgb(255,203,107)\",\n                },\n              },\n              {\n                types: [\"string\"],\n                style: {\n                  color: \"rgb(73,209,110)\",\n                },\n              },\n              {\n                types: [\"comment\"],\n                style: {\n                  color: \"var(--code-fg-subtle)\",\n                },\n              },\n            ],\n          }}\n          code={active.code}\n          language={active.language}\n        >\n          {({ style, tokens, getLineProps, getTokenProps }) => (\n            <pre\n              className={clx(\"code-body whitespace-pre-wrap bg-transparent\", {\n                \"grid grid-cols-[auto,1fr] gap-x-4\": !active.hideLineNumbers,\n              })}\n              style={{\n                ...style,\n                background: \"transparent\",\n              }}\n            >\n              {!active.hideLineNumbers && (\n                <div role=\"presentation\" className=\"flex flex-col text-right\">\n                  {tokens.map((_, i) => (\n                    <span\n                      key={i}\n                      className=\"text-ui-code-fg-subtle tabular-nums\"\n                    >\n                      {i + 1}\n                    </span>\n                  ))}\n                </div>\n              )}\n              <div>\n                {tokens.map((line, i) => (\n                  <div key={i} {...getLineProps({ line })}>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </pre>\n          )}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\nBody.displayName = \"CodeBlock.Body\"\n\nconst CodeBlock = Object.assign(Root, { Body, Header, Meta })\n\nexport { CodeBlock }\n"]}