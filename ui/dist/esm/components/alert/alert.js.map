{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../../../src/components/alert/alert.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AACjC,OAAO,EACL,gBAAgB,EAChB,sBAAsB,EACtB,sBAAsB,EACtB,YAAY,EACZ,SAAS,GACV,MAAM,iBAAiB,CAAA;AACxB,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAA;AAOrD;;;;GAIG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CACnC,CACE;AACE;;GAEG;AACH,OAAO,GAAG,MAAM;AAChB;;GAEG;AACH,WAAW,GAAG,KAAK,EACnB,SAAS,EACT,QAAQ,EACR,GAAG,KAAK,EACG,EACb,GAAG,EACH,EAAE;IACF,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAEvD,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,sBAAsB;QAC5B,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,gBAAgB;QACzB,OAAO,EAAE,sBAAsB;KAChC,CAAC,OAAO,CAAC,CAAA;IAEV,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,YAAY,CAAC,IAAI,CAAC,CAAA;IACpB,CAAC,CAAA;IAED,IAAI,SAAS,EAAE;QACb,OAAO,IAAI,CAAA;KACZ;IAED,OAAO,CACL,6BACE,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,GAAG,CACZ,8FAA8F,EAC9F;YACE,sBAAsB,EAAE,CAAC,WAAW;YACpC,2BAA2B,EAAE,WAAW;SACzC,EACD,SAAS,CACV,KACG,KAAK;QAET,oBAAC,IAAI,IACH,SAAS,EAAE,GAAG,CAAC;gBACb,sBAAsB,EAAE,OAAO,KAAK,OAAO;gBAC3C,wBAAwB,EAAE,OAAO,KAAK,SAAS;gBAC/C,yBAAyB,EAAE,OAAO,KAAK,SAAS;gBAChD,0BAA0B,EAAE,OAAO,KAAK,MAAM;aAC/C,CAAC,GACF;QACF,iCAAM,QAAQ,CAAO;QACpB,WAAW,IAAI,CACd,oBAAC,UAAU,IACT,IAAI,EAAC,SAAS,EACd,OAAO,EAAC,aAAa,EACrB,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,aAAa;YAEtB,oBAAC,SAAS,IAAC,SAAS,EAAC,kBAAkB,GAAG,CAC/B,CACd,CACG,CACP,CAAA;AACH,CAAC,CACF,CAAA","sourcesContent":["import { clx } from \"@/utils/clx\"\nimport {\n  CheckCircleSolid,\n  ExclamationCircleSolid,\n  InformationCircleSolid,\n  XCircleSolid,\n  XMarkMini,\n} from \"@medusajs/icons\"\nimport * as React from \"react\"\n\nimport { IconButton } from \"@/components/icon-button\"\n\ninterface AlertProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  variant?: \"error\" | \"success\" | \"warning\" | \"info\"\n  dismissible?: boolean\n}\n\n/**\n * This component is based on the div element and supports all of its props\n *\n * @excludeExternal\n */\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>(\n  (\n    {\n      /**\n       * The variant of the alert\n       */\n      variant = \"info\",\n      /**\n       * Whether the alert is dismissible\n       */\n      dismissible = false,\n      className,\n      children,\n      ...props\n    }: AlertProps,\n    ref\n  ) => {\n    const [dismissed, setDismissed] = React.useState(false)\n\n    const Icon = {\n      info: InformationCircleSolid,\n      error: XCircleSolid,\n      success: CheckCircleSolid,\n      warning: ExclamationCircleSolid,\n    }[variant]\n\n    const handleDismiss = () => {\n      setDismissed(true)\n    }\n\n    if (dismissed) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={clx(\n          \"bg-ui-bg-subtle text-pretty txt-compact-small grid items-start gap-x-3 rounded-lg border p-3\",\n          {\n            \"grid-cols-[20px_1fr]\": !dismissible,\n            \"grid-cols-[20px_1fr_20px]\": dismissible,\n          },\n          className\n        )}\n        {...props}\n      >\n        <Icon\n          className={clx({\n            \"text-ui-tag-red-icon\": variant === \"error\",\n            \"text-ui-tag-green-icon\": variant === \"success\",\n            \"text-ui-tag-orange-icon\": variant === \"warning\",\n            \"text-ui-tag-neutral-icon\": variant === \"info\",\n          })}\n        />\n        <div>{children}</div>\n        {dismissible && (\n          <IconButton\n            size=\"2xsmall\"\n            variant=\"transparent\"\n            type=\"button\"\n            onClick={handleDismiss}\n          >\n            <XMarkMini className=\"text-ui-fg-muted\" />\n          </IconButton>\n        )}\n      </div>\n    )\n  }\n)\n"]}