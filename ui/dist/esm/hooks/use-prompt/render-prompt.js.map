{"version":3,"file":"render-prompt.js","sourceRoot":"","sources":["../../../../src/hooks/use-prompt/render-prompt.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { Input } from \"@/components/input\"\nimport { Label } from \"@/components/label\"\nimport { Prompt } from \"@/components/prompt\"\n\nexport interface RenderPromptProps {\n  open: boolean\n  title: string\n  description: string\n  variant?: \"danger\" | \"confirmation\"\n  verificationText?: string\n  verificationInstruction?: string\n  cancelText?: string\n  confirmText?: string\n  onConfirm: () => void\n  onCancel: () => void\n}\n\nexport const RenderPrompt = ({\n  /**\n   * @ignore\n   */\n  open,\n  /**\n   * The variant of the prompt.\n   */\n  variant = \"danger\",\n  /**\n   * The prompt's title.\n   */\n  title,\n  /**\n   * The prompt's description.\n   */\n  description,\n  /**\n   * The text the user has to input in order to confirm the action.\n   */\n  verificationText,\n  /**\n   * The instruction for the verification text. Useful for passing a translated string to use instead of the default english one.\n   * Should be in the format: \"Please type {val} to confirm:\"\n   */\n  verificationInstruction = \"Please type {val} to confirm:\",\n  /**\n   * The label for the Cancel button.\n   */\n  cancelText = \"Cancel\",\n  /**\n   * Label for the Confirm button.\n   */\n  confirmText = \"Confirm\",\n  /**\n   * @ignore\n   */\n  onConfirm,\n  /**\n   * @ignore\n   */\n  onCancel,\n}: RenderPromptProps) => {\n  const [userInput, setUserInput] = React.useState(\"\")\n\n  const handleUserInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserInput(event.target.value)\n  }\n\n  const validInput = React.useMemo(() => {\n    if (!verificationText) {\n      return true\n    }\n\n    return userInput === verificationText\n  }, [userInput, verificationText])\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n\n    if (!verificationText) {\n      return\n    }\n\n    if (validInput) {\n      onConfirm()\n    }\n  }\n\n  React.useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\" && open) {\n        onCancel()\n      }\n    }\n\n    document.addEventListener(\"keydown\", handleEscape)\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape)\n    }\n  }, [onCancel, open])\n\n  let instructionParts = verificationInstruction.includes(\"{val}\")\n    ? verificationInstruction.split(\"{val}\")\n    : [\"Please type\", \"to confirm:\"]\n\n  if (instructionParts.length !== 2) {\n    instructionParts = [\"Please type\", \"to confirm:\"]\n  }\n\n  return (\n    <Prompt open={open} variant={variant}>\n      <Prompt.Content>\n        <form onSubmit={handleFormSubmit}>\n          <Prompt.Header>\n            <Prompt.Title>{title}</Prompt.Title>\n            <Prompt.Description>{description}</Prompt.Description>\n          </Prompt.Header>\n          {verificationText && (\n            <div className=\"border-ui-border-base mt-6 flex flex-col gap-y-4 border-y p-6\">\n              <Label htmlFor=\"verificationText\" className=\"text-ui-fg-subtle\">\n                {instructionParts[0]}{\" \"}\n                <span className=\"text-ui-fg-base txt-compact-medium-plus\">\n                  {verificationText}\n                </span>{\" \"}\n                {instructionParts[1]}\n              </Label>\n              <Input\n                autoFocus\n                autoComplete=\"off\"\n                id=\"verificationText\"\n                placeholder={verificationText}\n                onChange={handleUserInput}\n              />\n            </div>\n          )}\n          <Prompt.Footer>\n            <Prompt.Cancel onClick={onCancel}>{cancelText}</Prompt.Cancel>\n            <Prompt.Action\n              disabled={!validInput}\n              type={verificationText ? \"submit\" : \"button\"}\n              onClick={verificationText ? undefined : onConfirm}\n            >\n              {confirmText}\n            </Prompt.Action>\n          </Prompt.Footer>\n        </form>\n      </Prompt.Content>\n    </Prompt>\n  )\n}\nRenderPrompt.displayName = \"RenderPrompt\"\n"]}